#Graficamos la Serie de Tiempo
plot(tserie, type = "l")
plot(tseries, type = "l")
plot(tseries, type = "o")
descomp <- decompose(tseries, type = "additive")
cat("\014")
plot(tseries, type = "l")
plot(tseries, type = "o")
help('plot')
ms <- mean(tseries)
ds <- sd(tseries)
?hist
hist(tseries, prob=T)
hist(tseries)
lines(density(tseries), col="red", lwd=2)
xn <- seq(min(tseries), max(tseries), length=100)
yn <- dnorm(xn, ms, ds)
lines(xn, yn, col="blue", lwd=2)
hist(tseries, prob=T)
lines(density(tseries), col="red", lwd=2)
xn <- seq(min(tseries), max(tseries), length=100)
yn <- dnorm(xn, ms, ds)
lines(xn, yn, col="blue", lwd=2)
?prob
?hist
ms <- mean(tseries)
ds <- sd(tseries)
hist(tseries, prob=T)
lines(density(tseries), col="red", lwd=2)
xn <- seq(min(tseries), max(tseries), length=100)
yn <- dnorm(xn, ms, ds)
lines(xn, yn, col="blue", lwd=2)
install.packages("rgl")
library("rgl")
install.packages("plot3D")
install.packages("scatterplot3d")
install.packages("rgl")
test  <- read.csv("test.csv")
train  <- read.csv("train.csv")
setwd("C:/Users/nadi_/Dropbox/Minería_Proyecto")
#Creamos la funciÃ³n que recibe los paquetes
install = function(pkg){
#Si ya estÃ¡ instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("foreach")
#Seleccionamos los archivos que queremos instalar
archive = c("shiny", "rmarkdown", "recommenderlab", "caret")
foreach(i = archive) %do% install(i)
train <- read.csv("train.csv")
train$Artist <- NULL
train$Time <- NULL
track.id <- as.factor(train$Track)
t_size <- floor(0.6 * length(train$User))
#Paticion train
t_indx <- sample(seq_len(length(train$User)), size = t_size)
train.final <- train[t_indx, ]
#Paticion test
test.final <- train[-t_indx,]
#Matriz sparse con sampling del 60%
track <- as.factor(train.final$Track)
user <- as.factor(train.final$User)
music = sparseMatrix(i = as.numeric(user), j = as.numeric(track),
x = as.numeric(train.final$Rating))
colnames(music) <- levels(track)
rownames(music) <- levels(user)
dim(music)
# Dibujo de la data donde se marcan las canciones escuchadas por el 60% de la poblaci?n
image(music[1:187,1:107], main = "Data de Ratings", col.regions = rainbow(100))
summary(getRatings(train.matrix))
#Matriz sparce con sampling del 40%
track <- as.factor(test.final$Track)
user <- as.factor(test.final$User)
music.test = sparseMatrix(i = as.numeric(user), j = as.numeric(track),
x = as.numeric(test.final$Rating))
colnames(music.test) <- levels(track)
rownames(music.test) <- levels(user)
dim(music.test)
# Dibujo de la data donde se marcan las canciones escuchadas por el 0.001% de la poblaci?n
image(music.test[1:187,1:107], main = "Data de Ratings", col.regions = rainbow(100))
summary(getRatings(train.matrix))
# Usando la funciÃ³n as, para conseguir una realRatingMatrix
train.matrix <- new("realRatingMatrix", data = music)
train.matrix <- new("realRatingMatrix", data = music)
dim(train.matrix)
test.matrix <- new("realRatingMatrix", data = music)
image(music.test[1:187,1:107], main = "Data de Ratings", col.regions = rainbow(100))
summary(getRatings(train.matrix))
image(music.test[1:187,1:107], main = "Data de Ratings Test", col.regions = rainbow(100))
summary(getRatings(test.matrix))
ubcf.model.cos <- Recommender(train.matrix, method="UBCF",
param=list(normalize = "Z-score", method = "Cosine",
nn = 5, minRating = 0))
ubcf.model.jac <- Recommender(train.matrix, method = "UBCF",
param = list(normalize = "Z-score", method ="Jaccard",
nn = 5, minRating = 0))
# Modelo usando IBCF + Normalizado con Coseno
ibcf.model.cos <- Recommender(train.matrix, method = "IBCF",
param = list(normalize = "Z-score", method = "Cosine",
minRating = 0))
# Modelo usando IBCF + Normalizado con Jaccard
ibcf.model.jac <- Recommender(train.matrix, method = "IBCF",
param = list(normalize = "Z-score", method = "Jaccard",
minRating = 0))
################################################################
recom.jac <- predict(ibcf.model.jac, train.matrix[1:nrow(train.matrix)], type="ratings")
recom.jac <- predict(ibcf.model.jac, test.matrix[1:nrow(test.matrix)], type="ratings")
recom.cos <- predict(ibcf.model.cos, test.matrix[1:nrow(test.matrix)], type="ratings")
recom.cos <- predict(ubcf.model.cos, test.matrix[1:nrow(test.matrix)], type="ratings")
?calcPredictionAccuracy
eval <- calcPredictionAccuracy(recom.jac, test.matrix)
rm(eval)
eval.jac <- calcPredictionAccuracy(recom.jac, test.matrix)
eval.cos <- calcPredictionAccuracy(recom.cos, test.matrix)
eval.cos
eval.jac
?evaluationScheme
train <- read.csv("train.csv")
train$Artist <- NULL
train$Time <- NULL
data(Jester5k)
track.id <- as.factor(train$Track)
user.id <- as.factor(train$User)
music.sparse = sparseMatrix(i = as.numeric(user.id), j = as.numeric(track.id),
x = as.numeric(train$Rating))
colnames(music.sparse) <- levels(track.id)
rownames(music.sparse) <- levels(user.id)
dim(music.sparse)
# Usando la funciÃ³n as, para conseguir una realRatingMatrix
train.matrix <- new("realRatingMatrix", data = music.sparse)
dim(train.matrix)
rm(user.id, music.sparse, track.id)
e <- evaluationScheme(Jester5k[1:500,], method="split", train=0.9,
k=1, given=15)
e
rm(e, Jester5k)
rm(track.id, music.id)
image(train.matrix[1:100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(train.matrix[10000:10100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(train.matrix[19000:19100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(train.matrix[40000:40100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
summary(getRatings(train.matrix))
t_size <- floor(0.6 * length(train$User))
t_indx <- sample(seq_len(length(train$User)), size = t_size)
train.final <- train[t_indx, ]
test.final <- train[-t_indx,]
rm(t_size, t_indx)
track <- as.factor(train.final$Track)
user <- as.factor(train.final$User)
music = sparseMatrix(i = as.numeric(user), j = as.numeric(track),
x = as.numeric(train.final$Rating))
colnames(music) <- levels(track)
rownames(music) <- levels(user)
dim(music)
#Matriz sparce con sampling del 40%
track <- as.factor(test.final$Track)
user <- as.factor(test.final$User)
music.test = sparseMatrix(i = as.numeric(user), j = as.numeric(track),
x = as.numeric(test.final$Rating))
colnames(music.test) <- levels(track)
rownames(music.test) <- levels(user)
dim(music.test)
track <- as.factor(test.final$Track)
user <- as.factor(test.final$User)
music.test = sparseMatrix(i = as.numeric(user), j = as.numeric(track),
x = as.numeric(test.final$Rating))
colnames(music.test) <- levels(track)
rownames(music.test) <- levels(user)
dim(music.test)
train.matrix <- new("realRatingMatrix", data = music)
test.matrix <- new("realRatingMatrix", data = music.test)
rm(music, track, user)
music.train = sparseMatrix(i = as.numeric(user), j = as.numeric(track),
x = as.numeric(train.final$Rating))
track <- as.factor(train.final$Track)
user <- as.factor(train.final$User)
music.train = sparseMatrix(i = as.numeric(user), j = as.numeric(track),
x = as.numeric(train.final$Rating))
rm(track, user)
??`dgCMatrix-class`
?dgCMatrix-class
?`dgCMatrix-class`
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
# Modelo usando IBCF + Normalizado con Coseno
ibcf.model.cos <- Recommender(train.matrix, method = "IBCF",
param = list(normalize = "Z-score", method = "Cosine",
minRating = 0))
# Modelo usando IBCF + Normalizado con Jaccard
ibcf.model.jac <- Recommender(train.matrix, method = "IBCF",
param = list(normalize = "Z-score", method = "Jaccard",
minRating = 0))
recom.jac <- predict(ibcf.model.jac, test.matrix[1:nrow(test.matrix)], type="ratings")
recom.cos <- predict(ibcf.model.cos, test.matrix[1:nrow(test.matrix)], type="ratings")
image(recom.jac[1:100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
train <- read.csv("train.csv")
# Eliminacion de variables que no aportan informacion al modelo
train$Artist <- NULL
train$Time <- NULL
#Analisis exploratorio
track.id <- as.factor(train$Track)
user.id <- as.factor(train$User)
music.sparse = sparseMatrix(i = as.numeric(user.id), j = as.numeric(track.id),
x = as.numeric(train$Rating))
colnames(music.sparse) <- levels(track.id)
rownames(music.sparse) <- levels(user.id)
dim(music.sparse)
# Consiguiendo una realRatingMatrix
train.matrix <- new("realRatingMatrix", data = music.sparse)
dim(train.matrix)
rm(track.id, music.id)
rm(user.id)
image(train.matrix[40000:40100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
summary(getRatings(train.matrix))
image(train.matrix[1:100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
Split <- evaluationScheme(train.matrix, method="split",
train = 0.9, given=5)
Split <- evaluationScheme(train.matrix, method="split",
train = 0.9, given=4)
Split <- evaluationScheme(train.matrix, method="split",
train = 0.9, given=3)
Split <- evaluationScheme(train.matrix, method="split",
train = 0.9)
Split <- evaluationScheme(train.matrix, method="split",
train = 0.9, given=1)
Split <- evaluationScheme(train.matrix, method="split", train = 0.9, given=3)
Split <- evaluationScheme(train.matrix, method="split", train = 0.9, given=2)
Split
Split <- evaluationScheme(train.matrix, method="split", train = 0.9, given=1, goodRating = 100)
Split
ibcf.cos <- Recommender(getData(Split, "train"), "IBCF")
ibcf.cos <- Recommender(getData(Split, "train"), method = "IBCF",
param = list(normalize = "Z-score", method = "Cosine",
minRating = 0)
)
ibcf.jac <- Recommender(getData(Split, "train"), method = "IBCF",
param = list(normalize = "Z-score", method = "Jaccard",
minRating = 0)
)
ibcf.cos
ibcf.jac
ubcf <- Recommender(getData(Split, "train"), method = "UBCF",
param = list(normalize = "Z-score", method = "Jaccard",
minRating = 0)
)
ubcf.cos <- Recommender(getData(Split, "train"), method = "UBCF",
param = list(normalize = "Z-score", method = "Cosine",
minRating = 0))
p.ibcfc <- predict(ibcf.cos, getData(Split, "known"), type="ratings")
p.ibcfj <- predict(ibcf.jac, getData(Split, "known"), type="ratings")
p.ubcfj <- predict(ubcf.jac, getData(Split, "known"), type="ratings")
ubcf.jac <- Recommender(getData(Split, "train"), method = "UBCF",
param = list(normalize = "Z-score", method = "Jaccard",
minRating = 0))
p.ubcfj <- predict(ubcf.jac, getData(Split, "known"), type="ratings")
p.ubcfc <- predict(ubcf.cos, getData(Split, "known"), type="ratings")
error <- rbind(
calcPredictionAccuracy(p.ibcfc, getData(Split, "unknown")),
calcPredictionAccuracy(p.ibcfj, getData(Split, "unknown"))
)
rownames(error) <- c("IBCF Cos","IBCF Jac")
error
p.ubcfc
p.ibcfj
image(p.ibcfj[1:100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[1:100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[10000:10100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[4000:4100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[3000:3100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[2000:2100,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[3000:3200,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[3200:3500,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[200:500,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[200:400,1:184], main = "Data de Ratings", col.regions = rainbow(100))
image(p.ibcfc[200:300,1:184], main = "Data de Ratings", col.regions = rainbow(100))
results <- evaluate(ibcf.cos, algorithms, type = "ratings")
algorithms <- list(
"item-based CFJ" = list(name="IBCF"),
"item-based CFC" = list(name="IBCF")
)
results <- evaluate(ibcf.cos, algorithms, type = "ratings")
results <- evaluate(Split, algorithms, type = "ratings")
results
algorithms <- list(
"item-based CF" = list(name="IBCF"),
"User-based CF" = list(name="UBCF")
)
results <- evaluate(Split, algorithms, type = "ratings")
t_size <- floor(0.001 * length(train$User))
#Patici?n
t_indx <- sample(seq_len(length(train$User)), size = t_size)
train2 <- train[t_indx, ]
#Matriz sparce con sampling de 0.001%
track.id2 <- as.factor(train2$Track)
user.id2 <- as.factor(train2$User)
music.sparse2 = sparseMatrix(i = as.numeric(user.id2), j = as.numeric(track.id2),
x = as.numeric(train2$Rating))
colnames(music.sparse2) <- levels(track.id2)
rownames(music.sparse2) <- levels(user.id2)
dim(music.sparse2)
dim(music.sparse2)[1]
dim(music.sparse2)
# Dibujo de la data donde se marcan las canciones escuchadas por el 0.001% de la poblaci?n
image(music.sparse2[1:dim(music.sparse2)[1],1:dim(music.sparse2)[2]], main = "Data de Ratings", col.regions = rainbow(100))
View(train)
hist(train$Rating)
hist(train$Rating, col = "skyblue")
hist(train$Rating, col = "skyblue",
main = "Histograma de Rating",
xlab = "Rating",
ylab = "Frecuencia")
plot(results, annotate = TRUE, main = "ROC curve")
getConfusionMatrix(results)
getConfusionMatrix(results[[1]])
getConfusionMatrix(results[1])
?load
save(p.ibcfc, file = 'p_ibcfc.RD')
save(p.ibcfc, file = 'p_ibcfc.RData')
save(p.ibcfc, file = 'p_ibcfj.RData')
save(p.ibcfj, file = 'p_ibcfj.RData')
p.ibcfc <- load("p_ibcfc.RData")
p.ibcfj <- load("p_ibcfj.RData")
p.ubcfj <- load("p_ubcfc.rda")
p.ubcfc <- load("p_ubcfj.rda")
p.ibcfc <- load(file = "p_ibcfc.RData")
?load
p.ibcfc <- load("p_ibcfc.RData", .GlobalEnv)
p.ubcfc <- load("p_ubcfj.rda")
p.ubcfj <- load("p_ubcfc.rda")
p.ubcfc <- load("p_ubcfj.rda")
p.ibcfc <- load("p_ibcfc.RData", .GlobalEnv)
p.ibcfj <- load("p_ibcfj.RData")
load("p_ibcfc.RData", .GlobalEnv)
load("p_ibcfj.RData")
load("p_ubcfc.rda")
load("p_ubcfj.rda")
load("p_ibcfc.RData")
runApp()
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('serv')
runApp('serv')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
# ___ Instalacion de Paquetes necesarios ___
#Creamos la funciÃ³n que recibe los paquetes
install = function(pkg){
#Si ya estÃ¡ instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("foreach")
#Seleccionamos los archivos que queremos instalar
archive = c("shiny", "rmarkdown", "recommenderlab", "caret")
foreach(i = archive) %do% install(i)
train <- read.csv("train.csv")
train$Artist <- NULL
train$Time <- NULL
#Analisis exploratorio
track.id <- as.factor(train$Track)
user.id <- as.factor(train$User)
music.sparse = sparseMatrix(i = as.numeric(user.id), j = as.numeric(track.id),
x = as.numeric(train$Rating))
colnames(music.sparse) <- levels(track.id)
rownames(music.sparse) <- levels(user.id)
train.matrix <- new("realRatingMatrix", data = music.sparse)
# Dibujando la Data con un Subset de 0.01% de la poblacion
#Tama?o de la muestra
t_size <- floor(0.001 * length(train$User))
#Patici?n
t_indx <- sample(seq_len(length(train$User)), size = t_size)
train2 <- train[t_indx, ]
#Matriz sparce con sampling de 0.001%
track.id2 <- as.factor(train2$Track)
user.id2 <- as.factor(train2$User)
music.sparse2 = sparseMatrix(i = as.numeric(user.id2), j = as.numeric(track.id2),
x = as.numeric(train2$Rating))
colnames(music.sparse2) <- levels(track.id2)
rownames(music.sparse2) <- levels(user.id2)
dim(music.sparse2)
image(music.sparse2[1:dim(music.sparse2)[1],1:dim(music.sparse2)[2]],
main = "Sample de la Poblacion", col.regions = rainbow(100))
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
load("p_ibcfc.RData")
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
Split <- evaluationScheme(train.matrix, method="split", train = 0.9, given=1, goodRating = 100)
save(split, file = "split.RData")
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
error.ubcf
error.ubcf <- rbind(
calcPredictionAccuracy(p.ubcfc, getData(Split, "unknown")),
calcPredictionAccuracy(p.ubcfj, getData(Split, "unknown"))
)
load("p_ibcfc.RData")
load("p_ibcfj.RData")
load("p_ubcfc.rda")
load("p_ubcfj.rda")
load("split.RData")
error.ubcf <- rbind(
calcPredictionAccuracy(p.ubcfc, getData(Split, "unknown")),
calcPredictionAccuracy(p.ubcfj, getData(Split, "unknown"))
)
rownames(error.ubcf) <- c("UBCF Cos","UBCF Jac")
error.ubcf
table(error.ubcf)
error.ubcf[1]
paste(error.ubcf[1], " ", error.ubcf[2])
paste("UBCF Cos", " ",
error.ubcf[1], " ",
error.ubcf[1,2], " ",
error.ubcf[1,3])
error.ubcf[2]
str1<-paste("UBCF Cos", " ",
error.ubcf[1,2], " ",
error.ubcf[1,2], " ",
error.ubcf[1,3])
str1<-paste("UBCF Cos", " ",
error.ubcf[2,1], " ",
error.ubcf[2,2], " ",
error.ubcf[2,3])
HTML(paste(str1, str2, sep = '<br/>'))
str1<-paste("UBCF Cos", " ",
error.ubcf[1,2], " ",
error.ubcf[1,2], " ",
error.ubcf[1,3])
str2<-paste("UBCF Cos", " ",
error.ubcf[2,1], " ",
error.ubcf[2,2], " ",
error.ubcf[2,3])
HTML(paste(str1, str2, sep = '<br/>'))
str0<-paste("RMSE", "MSE", "MAE")
runApp('C:/Users/nadi_/Dropbox/App-1')
paste(str0, str1, str2, sep = '\n')
paste(str0, str1, str2, sep = br())
paste(str0, str1, str2, sep = "/n")
paste(str0, str1, str2, sep = "\n")
cat(paste(str0, str1, str2, sep = "\n"))
str4<-"    "
str4<-paste(" "," ")
str4<-paste(" "," ", " ")
str4<-paste(" ")
runApp('C:/Users/nadi_/Dropbox/App-1')
error.ibcf[1,]
error.ibcf <- rbind(
calcPredictionAccuracy(p.ibcfc, getData(Split, "unknown")),
calcPredictionAccuracy(p.ibcfj, getData(Split, "unknown"))
)
rownames(error.ibcf) <- c("IBCF Cos","IBCF Jac")
error.ibcf[1,]
error.ibcf[2,]
error.ibcf[3,]
names(error.ibcf)
error.ibcf[0,]
runApp('C:/Users/nadi_/Dropbox/App-1')
runApp('C:/Users/nadi_/Dropbox/App-1')
